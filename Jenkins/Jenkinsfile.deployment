pipeline {
    agent {
        docker {
            image 'ubuntu:latest'
            args '-u root'
        }
    }
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'prod'], description: 'Select deployment environment (dev/qa/prod)')
        string(name: 'BUILD_VERSION', defaultValue: 'latest', description: 'Specify build version')
        booleanParam(name: 'FORCE_REBUILD', defaultValue: true, description: 'Force rebuild even if image exists')
    }
    environment {
        ECR_REGISTRY = '677276078734.dkr.ecr.us-east-1.amazonaws.com'
        AWS_REGION = 'us-east-1'
        ENV_NAME = "${params.ENVIRONMENT == 'dev' ? 'dampen' : params.ENVIRONMENT == 'qa' ? 'iamdqa' : 'prod'}"
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        apt-get update
                        apt-get install -y docker.io curl unzip git jq
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip -o -q awscliv2.zip
                        ./aws/install --update
                    '''
                }
            }
        }
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: 'main',
                    url: 'https://github.com/shivani-fission/FloTorch.git'
            }
        }
        stage('Clean Up Old Tags') {
            steps {
                script {
                    // Define services
                    def services = ['app', 'indexing', 'retriever', 'evaluation']
                   
                    withAWS(credentials: 'aws-creds', region: env.AWS_REGION) {
                        services.each { service ->
                            def repoName = "flotorch-${service}-${ENV_NAME}"
                           
                            echo "Cleaning up repository: ${repoName}"
                           
                            try {
                                // Check if repository exists
                                sh """
                                    if aws ecr describe-repositories --repository-names ${repoName} --region ${AWS_REGION} 2>/dev/null; then
                                        echo "Repository exists: ${repoName}"
                                       
                                        # First, remove any comma-separated multi-tagged images
                                        MULTI_TAGS=\$(aws ecr list-images --repository-name ${repoName} --query "imageIds[?contains(imageTag, ',')].imageTag" --output json)
                                        if [ "\$(echo \$MULTI_TAGS | jq 'length')" -gt "0" ]; then
                                            echo "Found multi-tagged images, removing them..."
                                            echo \$MULTI_TAGS | jq -r '.[]' | while read -r tag; do
                                                aws ecr batch-delete-image --repository-name ${repoName} --image-ids imageTag="\$tag" || true
                                            done
                                        fi
                                       
                                        # If FORCE_REBUILD is true, remove the specific version tag if it exists
                                        if [ "${params.FORCE_REBUILD}" = "true" ]; then
                                            echo "Checking if version ${params.BUILD_VERSION} exists..."
                                            if aws ecr describe-images --repository-name ${repoName} --image-ids imageTag=${params.BUILD_VERSION} 2>/dev/null; then
                                                echo "Removing existing image with tag ${params.BUILD_VERSION}"
                                                aws ecr batch-delete-image --repository-name ${repoName} --image-ids imageTag=${params.BUILD_VERSION} || true
                                            fi
                                        fi
                                    else
                                        echo "Repository does not exist: ${repoName}"
                                    fi
                                """
                            } catch (Exception e) {
                                echo "Warning: Error during cleanup for ${repoName}: ${e.getMessage()}"
                                // Continue with next repository
                            }
                        }
                    }
                }
            }
        }
        stage('Build and Push Images') {
            steps {
                script {
                    // Always build all four services
                    def services = ['app', 'indexing', 'retriever', 'evaluation']
                   
                    def builtImages = []
                    def failedImages = []
                   
                    // Display environment-specific header in console
                    echo """
                    ===================================================
                    BUILDING IMAGES FOR: ${params.ENVIRONMENT.toUpperCase()}
                    BUILD VERSION: ${params.BUILD_VERSION}
                    ALL SERVICES: ${services.join(', ')}
                    ===================================================
                    """
                   
                    withAWS(credentials: 'aws-creds', region: env.AWS_REGION) {
                        try {
                            // ECR Login
                            sh """
                                aws ecr get-login-password --region ${AWS_REGION} | \
                                docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            """
                           
                            // Build and push each service
                            services.each { service ->
                                def repoName = "flotorch-${service}-${ENV_NAME}"
                                def imageTagWithVersion = "${ECR_REGISTRY}/${repoName}:${params.BUILD_VERSION}"
                                def imageTagLatest = "${ECR_REGISTRY}/${repoName}:latest"
                               
                                echo "Building and pushing ${service} image for ${params.ENVIRONMENT}..."
                               
                                // Get the correct Dockerfile path and verify it exists
                                def dockerfilePath = "${service}/Dockerfile"
                               
                                // Check if Dockerfile exists
                                if (!fileExists(dockerfilePath)) {
                                    echo "WARNING: Dockerfile not found at ${dockerfilePath}, creating empty file for testing"
                                    // Create an empty Dockerfile for testing purposes
                                    sh "mkdir -p ${service}"
                                    sh """
                                    cat > ${dockerfilePath} << 'EOL'
FROM ubuntu:latest
RUN echo "This is a test image for ${service} - built on $(date)"
CMD ["echo", "Hello from ${service}"]
EOL
                                    """
                                }
                               
                                echo "Using Dockerfile at: ${dockerfilePath}"
                               
                                // Create ECR repository if it doesn't exist
                                sh """
                                    if ! aws ecr describe-repositories --repository-names ${repoName} --region ${AWS_REGION} 2>/dev/null; then
                                        echo "Creating ECR repository: ${repoName}"
                                        aws ecr create-repository --repository-name ${repoName} --region ${AWS_REGION}
                                    fi
                                """
                               
                                // Build and push
                                try {
                                    // Add a timestamp to the image to ensure it's unique
                                    def timestamp = new Date().format("yyyyMMdd-HHmmss")
                                   
                                    sh """
                                        # Build image with build date label to ensure uniqueness
                                        docker build --build-arg BUILD_DATE=${timestamp} -t ${imageTagWithVersion} -f ${dockerfilePath} . || exit 1
                                       
                                        # Push with version number
                                        docker push ${imageTagWithVersion} || exit 1
                                       
                                        # Tag as latest if requested
                                        if [ "${params.BUILD_VERSION}" != "latest" ]; then
                                            docker tag ${imageTagWithVersion} ${imageTagLatest}
                                            docker push ${imageTagLatest} || exit 1
                                            echo "Tagged and pushed as both ${params.BUILD_VERSION} and latest"
                                        else
                                            echo "Tagged and pushed as latest only"
                                        fi
                                    """
                                   
                                    builtImages.add([
                                        service: service,
                                        repo: repoName,
                                        image: imageTagWithVersion,
                                        environment: params.ENVIRONMENT
                                    ])
                                    echo "${service} image built and pushed to ${params.ENVIRONMENT} successfully"
                                } catch (Exception e) {
                                    echo "Failed to build/push ${service} image for ${params.ENVIRONMENT}: ${e.getMessage()}"
                                    failedImages.add(service)
                                }
                            }
                           
                            // Check if any images failed
                            if (failedImages.size() > 0) {
                                error "Failed to build/push the following images: ${failedImages.join(', ')}"
                            }
                           
                            // Create dashboard summary
                            def summary = "Images pushed to ${params.ENVIRONMENT.toUpperCase()} repositories:\n"
                            builtImages.each { img ->
                                summary += "- ${img.service}: ${img.image}\n"
                            }
                           
                            // Display dashboard summary
                            echo summary
                           
                            // Create a build artifact with the summary
                            writeFile file: "${params.ENVIRONMENT}-images.txt", text: summary
                            archiveArtifacts artifacts: "${params.ENVIRONMENT}-images.txt", allowEmptyArchive: true
                           
                            // Add environment information to build description
                            currentBuild.description = "ENV: ${params.ENVIRONMENT.toUpperCase()} | Version: ${params.BUILD_VERSION} | Services: ${builtImages.size()}/4"
                           
                        } catch (Exception e) {
                            echo "Error during build/push for ${params.ENVIRONMENT}: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        stage('Display Environment Dashboard') {
            steps {
                script {
                    echo """
                    =================================================
                    DEPLOYMENT SUMMARY FOR ${params.ENVIRONMENT.toUpperCase()}
                    =================================================
                    Environment: ${params.ENVIRONMENT}
                    Env Name: ${ENV_NAME}
                    Build Version: ${params.BUILD_VERSION}
                    Registry: ${ECR_REGISTRY}
                   
                    Services Deployed:
                    - app: ${ECR_REGISTRY}/flotorch-app-${ENV_NAME}:${params.BUILD_VERSION}
                    - indexing: ${ECR_REGISTRY}/flotorch-indexing-${ENV_NAME}:${params.BUILD_VERSION}
                    - retriever: ${ECR_REGISTRY}/flotorch-retriever-${ENV_NAME}:${params.BUILD_VERSION}
                    - evaluation: ${ECR_REGISTRY}/flotorch-evaluation-${ENV_NAME}:${params.BUILD_VERSION}
                   
                    Repository Pattern: flotorch-{service}-${ENV_NAME}
                    =================================================
                    """
                   
                    // Set the build display name to show environment
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${params.ENVIRONMENT.toUpperCase()}"
                }
            }
        }
    }
    post {
        success {
            echo "Successfully built and pushed all images for ${params.ENVIRONMENT} with version ${params.BUILD_VERSION}"
        }
        failure {
            echo "Failed to build/push images for ${params.ENVIRONMENT}"
        }
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
    }
}
