pipeline {
    agent {
        docker {
            image 'ubuntu:latest'
            args '-u root'
        }
    }
    parameters {
        string(name: 'ENVIRONMENT_SUFFIX', defaultValue: '', description: 'Enter the environment suffix for ECR repositories (e.g., jasper)')
    }
    environment {
        ECR_REGISTRY = '677276078734.dkr.ecr.us-east-1.amazonaws.com'
        AWS_REGION = 'us-east-1'
        ENV_SUFFIX = "${params.ENVIRONMENT_SUFFIX}"
    }
    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (params.ENVIRONMENT_SUFFIX.trim() == '') {
                        error "ENVIRONMENT_SUFFIX parameter is required. Please provide a valid value."
                    }
                    echo "Building and pushing images with suffix: ${ENV_SUFFIX}"
                }
            }
        }
       
        stage('Install Dependencies') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y docker.io curl unzip git
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip -o -q awscliv2.zip
                    ./aws/install --update
                '''
            }
        }
       
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: 'main',
                    url: 'https://github.com/shivani-fission/FloTorch.git'
            }
        }
       
        stage('Build and Push Images') {
            steps {
                script {
                    def services = [
                        [name: 'app', dockerfile: 'app/Dockerfile'],
                        [name: 'indexing', dockerfile: 'indexing/fargate_indexing.Dockerfile'],
                        [name: 'retriever', dockerfile: 'retriever/fargate_retriever.Dockerfile'],
                        [name: 'evaluation', dockerfile: 'evaluation/fargate_evaluation.Dockerfile'],
                        [name: 'runtime', dockerfile: 'opensearch/opensearch.Dockerfile']
                    ]
                   
                    withAWS(credentials: 'aws-creds', region: env.AWS_REGION) {
                        try {
                            // ECR Login
                            sh """
                                aws ecr get-login-password --region ${AWS_REGION} | \
                                docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            """
                           
                            // Build and push each service
                            services.each { service ->
                                def repoName = "flotorch-${service.name}-${ENV_SUFFIX}"
                                def imageTag = "${ECR_REGISTRY}/${repoName}:latest"
                                echo "Building and pushing ${service.name} image..."
                               
                                // Check if Dockerfile exists
                                if (!fileExists(service.dockerfile)) {
                                    error "Dockerfile not found at ${service.dockerfile}"
                                }
                               
                                echo "Using Dockerfile at: ${service.dockerfile}"
                               
                                // Create ECR repository if it doesn't exist
                                sh """
                                    if ! aws ecr describe-repositories --repository-names ${repoName} --region ${AWS_REGION} 2>/dev/null; then
                                        echo "Creating ECR repository: ${repoName}"
                                        aws ecr create-repository --repository-name ${repoName} --region ${AWS_REGION}
                                    fi
                                """
                               
                                // Build and push
                                try {
                                    sh """
                                        # Build image with linux/amd64 platform
                                        docker build --platform linux/amd64 -t ${imageTag} -f ${service.dockerfile} . || exit 1
                                       
                                        # Push image
                                        docker push ${imageTag} || exit 1
                                    """
                                    echo "${service.name} image built and pushed successfully"
                                } catch (Exception e) {
                                    echo "Failed to build/push ${service.name} image: ${e.getMessage()}"
                                    throw e
                                }
                            }
                           
                            // Build and push cost compute image separately
                            def costComputeRepo = "flotorch-costcompute-${ENV_SUFFIX}"
                            def costComputeTag = "${ECR_REGISTRY}/${costComputeRepo}:latest"
                           
                            sh """
                                if ! aws ecr describe-repositories --repository-names ${costComputeRepo} --region ${AWS_REGION} 2>/dev/null; then
                                    echo "Creating ECR repository: ${costComputeRepo}"
                                    aws ecr create-repository --repository-name ${costComputeRepo} --region ${AWS_REGION}
                                fi
                               
                                cd lambda_handlers
                                docker build --platform linux/amd64 -t ${costComputeTag} -f cost_handler/Dockerfile . || exit 1
                                docker push ${costComputeTag} || exit 1
                                cd ..
                            """
                            echo "Cost compute image built and pushed successfully"
                           
                        } catch (Exception e) {
                            echo "Error during build/push: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
       
        stage('Display Build Summary') {
            steps {
                script {
                    echo """
                    =================================================
                    BUILD AND PUSH SUMMARY FOR ${ENV_SUFFIX}
                    =================================================
                    Environment Suffix: ${ENV_SUFFIX}
                    AWS Region: ${AWS_REGION}
                    ECR Registry: ${ECR_REGISTRY}
                   
                    Images Pushed:
                    - flotorch-app-${ENV_SUFFIX}:latest
                    - flotorch-indexing-${ENV_SUFFIX}:latest
                    - flotorch-retriever-${ENV_SUFFIX}:latest
                    - flotorch-evaluation-${ENV_SUFFIX}:latest
                    - flotorch-runtime-${ENV_SUFFIX}:latest
                    - flotorch-costcompute-${ENV_SUFFIX}:latest
                   
                    Repository Pattern: flotorch-{service}-${ENV_SUFFIX}
                    =================================================
                    """
                }
            }
        }
    }
   
    post {
        success {
            echo "All images successfully built and pushed to ECR repositories with suffix: ${ENV_SUFFIX}"
        }
        failure {
            echo "Failed to build and push images to ECR repositories"
        }
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
    }
}
