{
  "Comment": "Step Function for Indexing and Retrieval Workflow",
  "StartAt": "Query model invocations",
  "States": {
    "Query model invocations": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.ModelInvocationsTable"
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "Next": "Map",
      "ResultPath": "$.invocations"
    },
    "Map": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Clear model invocations table",
        "States": {
          "Clear model invocations table": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
              "TableName.$": "$.ModelInvocationsTable",
              "Key": {
                "model_id": {
                  "S.$": "$.model_id.S"
                }
              },
              "UpdateExpression": "SET invocations = :myValueRef",
              "ExpressionAttributeValues": {
                ":myValueRef": {
                  "N": "0"
                }
              }
            },
            "End": true
          }
        }
      },
      "Next": "Query",
      "ItemsPath": "$.invocations.Items",
      "ResultPath": null
    },
    "Query": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.ExperimentTable",
        "IndexName": "execution_id-index",
        "KeyConditionExpression": "execution_id = :executionId",
        "ExpressionAttributeValues": {
          ":executionId": {
            "S.$": "$.execution_id"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "Next": "Create Opensearch indices",
      "ResultSelector": {
        "execution_id.$": "$.Items[0].execution_id",
        "Items.$": "$.Items"
      }
    },
    "Create Opensearch indices": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:677276078734:function:FloTorch-IndexCreation"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Index creation evaluation",
      "ResultPath": "$.indexCreation",
      "InputPath": "$.Items"
    },
    "Index creation evaluation": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.indexCreation.Payload.status",
          "StringEquals": "success",
          "Next": "Parallel"
        },
        {
          "Variable": "$.indexCreation.Payload.status",
          "StringEquals": "failed",
          "Next": "Update Execution status"
        }
      ]
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "Update Execution status",
      "Branches": [
        {
          "StartAt": "Pass",
          "States": {
            "Pass": {
              "Type": "Pass",
              "End": true,
              "ResultPath": null
            }
          }
        },
        {
          "StartAt": "Experiments Map",
          "States": {
            "Experiments Map": {
              "Type": "Map",
              "Iterator": {
                "StartAt": "DynamoDB GetItem By id",
                "States": {
                  "DynamoDB GetItem by Item.id": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:getItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      }
                    },
                    "Next": "Evaluate Indexing Status"
                  },
                  "DynamoDB GetItem By id": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:getItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.id.S"
                        }
                      }
                    },
                    "Next": "Extract config from experiment"
                  },
                  "Evaluate Indexing Status": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Item.index_status.S",
                        "StringEquals": "not_started",
                        "Next": "Indexing State Inprogress"
                      },
                      {
                        "Variable": "$.Item.index_status.S",
                        "StringEquals": "in_progress",
                        "Next": "Wait for Indexing Status Update"
                      },
                      {
                        "Variable": "$.Item.index_status.S",
                        "StringEquals": "succeeded",
                        "Next": "Retrieval Model Check"
                      },
                      {
                        "Variable": "$.Item.index_status.S",
                        "StringEquals": "failed",
                        "Next": "Experiment status update to failed"
                      }
                    ]
                  },
                  "Extract config from experiment": {
                    "Type": "Pass",
                    "Next": "Indexing Model Check",
                    "Parameters": {
                      "parsed_config": {
                        "index_id.$": "$.Item.index_id.S",
                        "execution_id.$": "$.Item.execution_id.S",
                        "experiment_id.$": "$.Item.id.S",
                        "gt_data.$": "$.Item.config.M.gt_data.S",
                        "kb_data.$": "$.Item.config.M.kb_data.S",
                        "indexing_algorithm.$": "$.Item.config.M.indexing_algorithm.S",
                        "chunk_overlap.$": "$.Item.config.M.chunk_overlap.N",
                        "retrieval_model.$": "$.Item.config.M.retrieval_model.S",
                        "knn_num.$": "$.Item.config.M.knn_num.N",
                        "chunking_strategy.$": "$.Item.config.M.chunking_strategy.S",
                        "retrieval_service.$": "$.Item.config.M.retrieval_service.S",
                        "embedding_model.$": "$.Item.config.M.embedding_model.S",
                        "embedding_service.$": "$.Item.config.M.embedding_service.S",
                        "n_shot_prompts.$": "$.Item.config.M.n_shot_prompts.N",
                        "chunk_size.$": "$.Item.config.M.chunk_size.N",
                        "vector_dimension.$": "$.Item.config.M.vector_dimension.N",
                        "temp_retrieval_llm.$": "$.Item.config.M.temp_retrieval_llm.N",
                        "aws_region.$": "$.Item.config.M.region.S",
                        "n_shot_prompt_guide.$": "$.Item.config.M.n_shot_prompt_guide.S"
                      }
                    },
                    "ResultPath": "$.parsedConfig"
                  },
                  "Wait for Indexing Status Update": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "DynamoDB GetItem by Item.id"
                  },
                  "Indexing Model Check": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:getItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}', $.parsedConfig.parsed_config.embedding_service, $.parsedConfig.parsed_config.embedding_model)"
                        }
                      }
                    },
                    "Next": "Evaluate Indexing Model Check",
                    "ResultPath": "$.modelInvocations"
                  },
                  "Evaluate Indexing Model Check": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Or": [
                          {
                            "Variable": "$.modelInvocations.Item",
                            "IsPresent": false
                          },
                          {
                            "Variable": "$.modelInvocations.Item.invocations.N",
                            "StringEquals": "0"
                          }
                        ],
                        "Next": "Indexing Model Invocation Update"
                      },
                      {
                        "Variable": "$.modelInvocations.Item.invocations.N",
                        "StringEquals": "1",
                        "Next": "Wait for Indexing Model Update"
                      }
                    ]
                  },
                  "Indexing Model Invocation Update": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}', $.parsedConfig.parsed_config.embedding_service, $.parsedConfig.parsed_config.embedding_model)"
                        }
                      },
                      "UpdateExpression": "SET invocations = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "N": "1"
                        },
                        ":prevRef": {
                          "N": "0"
                        }
                      },
                      "ConditionExpression": "invocations = :prevRef"
                    },
                    "Next": "Evaluate Indexing Status",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Comment": "Any error",
                        "Next": "Indexing Model Check",
                        "ResultPath": null
                      }
                    ],
                    "ResultPath": null
                  },
                  "Indexing State Inprogress": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET index_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "in_progress"
                        },
                        ":expStatusRef": {
                          "S": "indexing_inprogress"
                        }
                      }
                    },
                    "Next": "Run Indexing Task",
                    "ResultPath": null
                  },
                  "Run Indexing Task": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask.sync",
                    "Parameters": {
                      "LaunchType": "FARGATE",
                      "Cluster.$": "$.ClusterArn",
                      "TaskDefinition.$": "$.IndexingTaskDefinitionArn",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets.$": "$.PrivateSubnets",
                          "SecurityGroups.$": "$.SecurityGroups",
                          "AssignPublicIp": "DISABLED"
                        }
                      },
                      "Overrides": {
                        "ContainerOverrides": [
                          {
                            "Name.$": "$.IndexingContainerName",
                            "Environment": [
                              {"Name": "AWS_REGION", "Value.$": "$.Region"},
                              {"Name": "DATA_BUCKET", "Value.$": "$.DataBucket"},
                              {"Name": "EXECUTION_TABLE", "Value.$": "$.ExecutionTable"},
                              {"Name": "EXPERIMENT_TABLE", "Value.$": "$.ExperimentTable"},
                              {"Name": "METRICS_TABLE", "Value.$": "$.MetricsTable"},
                              {"Name": "MODEL_INVOCATIONS_TABLE", "Value.$": "$.ModelInvocationsTable"},
                              {"Name": "OPENSEARCH_HOST", "Value.$": "$.OpenSearchEndpoint"},
                              {"Name": "OPENSEARCH_USERNAME", "Value": "admin"},
                              {"Name": "OPENSEARCH_PASSWORD", "Value": "Fission@123"},
                              {"Name": "INPUT_DATA","Value.$": "States.JsonToString($.parsedConfig.parsed_config)"},
                              {"Name": "TASK_TOKEN","Value.$": "$$.Task.Token"}
                            ]
                          }
                        ]
                      }
                    },
                    "Next": "Evaluate Indexing Task",
                    "ResultPath": "$.indexTaskStatus"
                  },
                  "Wait for Indexing Model Update": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Indexing Model Check"
                  },
                  "Indexing Model Invocation Release": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}',  $.parsedConfig.parsed_config.embedding_service, $.parsedConfig.parsed_config.embedding_model)"
                        }
                      },
                      "UpdateExpression": "SET invocations = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "N": "0"
                        }
                      }
                    },
                    "Next": "Retrieval Model Check",
                    "ResultPath": null
                  },
                  "Evaluate Indexing Task": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.indexTaskStatus.status",
                        "StringEquals": "succeded",
                        "Next": "Index Status Success"
                      },
                      {
                        "Variable": "$.indexTaskStatus.status",
                        "StringEquals": "failed",
                        "Next": "indexing model lock release on failure"
                      }
                    ]
                  },
                  "indexing model lock release on failure": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}',  $.parsedConfig.parsed_config.embedding_service, $.parsedConfig.parsed_config.embedding_model)"
                        }
                      },
                      "UpdateExpression": "SET invocations = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "N": "0"
                        }
                      }
                    },
                    "Next": "Index Status Failure"
                  },
                  "Index Status Failure": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET index_status = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "failed"
                        }
                      }
                    },
                    "Next": "Experiment status update to failed",
                    "ResultPath": null
                  },
                  "Experiment status update to failed": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET experiment_status = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "failed"
                        }
                      }
                    },
                    "End": true
                  },
                  "Index Status Success": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET index_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "succeeded"
                        },
                        ":expStatusRef": {
                          "S": "indexing_completed"
                        }
                      }
                    },
                    "Next": "get experiments by index_id",
                    "ResultPath": null
                  },
                  "get experiments by index_id": {
                    "Type": "Task",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "IndexName": "index_id-index_status-index",
                      "KeyConditionExpression": "index_id = :indexId",
                      "ExpressionAttributeValues": {
                        ":indexId": {
                          "S.$": "$.Item.index_id.S"
                        }
                      }
                    },
                    "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
                    "Next": "update experiment index_status",
                    "ResultPath": "$.toUpdateIds"
                  },
                  "update experiment index_status": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "DynamoDB UpdateItem",
                      "States": {
                        "DynamoDB UpdateItem": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::dynamodb:updateItem",
                          "Parameters": {
                            "TableName.$": "$.ExperimentTable",
                            "Key": {
                              "id": {
                                "S.$": "$.id.S"
                              }
                            },
                            "UpdateExpression": "SET index_status = :indexStatusRef",
                            "ExpressionAttributeValues": {
                              ":indexStatusRef": {
                                "S": "succeeded"
                              }
                            }
                          },
                          "End": true
                        }
                      }
                    },
                    "Next": "Indexing Model Invocation Release",
                    "ItemsPath": "$.toUpdateIds.Items",
                    "ResultPath": null
                  },
                  "Retrieval Model Check": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:getItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}', $.parsedConfig.parsed_config.retrieval_service, $.parsedConfig.parsed_config.retrieval_model)"
                        }
                      }
                    },
                    "ResultPath": "$.retrieval_invocations",
                    "Next": "Evaluate Retrieval Model Check"
                  },
                  "Evaluate Retrieval Model Check": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.retrieval_invocations.Item.invocations.N",
                        "StringEquals": "0",
                        "Next": "Retrieval Model Invocation Update"
                      },
                      {
                        "Variable": "$.retrieval_invocations.Item.invocations.N",
                        "StringEquals": "1",
                        "Next": "Wait for Retrieval Model Update"
                      }
                    ]
                  },
                  "Retrieval Model Invocation Update": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}', $.parsedConfig.parsed_config.retrieval_service, $.parsedConfig.parsed_config.retrieval_model)"
                        }
                      },
                      "UpdateExpression": "SET invocations = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "N": "1"
                        },
                        ":prevRef": {
                          "N": "0"
                        }
                      },
                      "ConditionExpression": "invocations = :prevRef"
                    },
                    "Next": "Retrieval State Update",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Comment": "Retrieval lock acquire error",
                        "Next": "Retrieval Model Check",
                        "ResultPath": null
                      }
                    ],
                    "ResultPath": null
                  },
                  "Retrieval State Update": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET retrieval_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "in_progress"
                        },
                        ":expStatusRef": {
                          "S": "retrieval_inprogress"
                        }
                      }
                    },
                    "Next": "Run retrieval task",
                    "ResultPath": null
                  },
                  "Run retrieval task": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask.sync",
                    "Parameters": {
                      "LaunchType": "FARGATE",
                      "Cluster.$": "$.ClusterArn",
                      "TaskDefinition.$": "$.RetrieverTaskDefinitionArn",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets.$": "$.PrivateSubnets",
                          "SecurityGroups.$": "$.SecurityGroups",
                          "AssignPublicIp": "DISABLED"
                        }
                      },
                      "Overrides": {
                        "ContainerOverrides": [
                          {
                            "Name.$": "$.RetrieverContainerName",
                            "Environment": [
                              {"Name": "AWS_REGION", "Value.$": "$.Region"},
                              {"Name": "DATA_BUCKET", "Value.$": "$.DataBucket"},
                              {"Name": "EXECUTION_TABLE", "Value.$": "$.ExecutionTable"},
                              {"Name": "EXPERIMENT_TABLE", "Value.$": "$.ExperimentTable"},
                              {"Name": "METRICS_TABLE", "Value.$": "$.MetricsTable"},
                              {"Name": "MODEL_INVOCATIONS_TABLE", "Value.$": "$.ModelInvocationsTable"},
                              {"Name": "OPENSEARCH_HOST", "Value.$": "$.OpenSearchEndpoint"},
                              {"Name": "OPENSEARCH_USERNAME", "Value": "admin"},
                              {"Name": "OPENSEARCH_PASSWORD", "Value": "Fission@123"},
                              {"Name": "INPUT_DATA","Value.$": "States.JsonToString($.parsedConfig.parsed_config)"},
                              {"Name": "TASK_TOKEN","Value.$": "$$.Task.Token"}
                            ]
                          }
                        ]
                      }
                    },
                    "Next": "Retrieval Model Invocation Release",
                    "ResultPath": "$.retrieverOutput"
                  },
                  "Wait for Retrieval Model Update": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Retrieval Model Check"
                  },
                  "Retrieval Model Invocation Release": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ModelInvocationsTable",
                      "Key": {
                        "model_id": {
                          "S.$": "States.Format('{}_{}', $.parsedConfig.parsed_config.retrieval_service, $.parsedConfig.parsed_config.retrieval_model)"
                        }
                      },
                      "UpdateExpression": "SET invocations = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "N": "0"
                        }
                      }
                    },
                    "Next": "Evaluate Retrieval Model Task",
                    "ResultPath": null
                  },
                  "Evaluate Retrieval Model Task": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.retrieverOutput.status",
                        "StringEquals": "success",
                        "Next": "Retrieval State Success"
                      },
                      {
                        "Variable": "$.retrieverOutput.status",
                        "StringEquals": "failed",
                        "Next": "Retrieval State Failure"
                      }
                    ]
                  },
                  "Retrieval State Failure": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET retrieval_status = :myValueRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "failed"
                        }
                      }
                    },
                    "Next": "Experiment status update to failed",
                    "ResultPath": null
                  },
                  "Retrieval State Success": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET retrieval_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "succeeded"
                        },
                        ":expStatusRef": {
                          "S": "retrieval_completed"
                        }
                      }
                    },
                    "Next": "Run evaluation task",
                    "ResultPath": null
                  },
                  "Run evaluation task": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask.sync",
                    "Parameters": {
                      "LaunchType": "FARGATE",
                      "Cluster.$": "$.ClusterArn",
                      "TaskDefinition.$": "$.EvaluationTaskDefinitionArn",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets.$": "$.PrivateSubnets",
                          "SecurityGroups.$": "$.SecurityGroups",
                          "AssignPublicIp": "DISABLED"
                        }
                      },
                      "Overrides": {
                        "ContainerOverrides": [
                          {
                            "Name.$": "$.EvaluationContainerName",
                            "Environment": [
                              {"Name": "AWS_REGION", "Value.$": "$.Region"},
                              {"Name": "DATA_BUCKET", "Value.$": "$.DataBucket"},
                              {"Name": "EXECUTION_TABLE", "Value.$": "$.ExecutionTable"},
                              {"Name": "EXPERIMENT_TABLE", "Value.$": "$.ExperimentTable"},
                              {"Name": "METRICS_TABLE", "Value.$": "$.MetricsTable"},
                              {"Name": "MODEL_INVOCATIONS_TABLE", "Value.$": "$.ModelInvocationsTable"},
                              {"Name": "OPENSEARCH_HOST", "Value.$": "$.OpenSearchEndpoint"},
                              {"Name": "OPENSEARCH_USERNAME", "Value": "admin"},
                              {"Name": "OPENSEARCH_PASSWORD", "Value": "Fission@123"},
                              {"Name": "INPUT_DATA","Value.$": "States.JsonToString($.parsedConfig.parsed_config)"},
                              {"Name": "TASK_TOKEN","Value.$": "$$.Task.Token"}
                            ]
                          }
                        ]
                      }
                    },
                    "Next": "Evaluate task status",
                    "ResultPath": "$.evaluatorOutput"
                  },
                  "Evaluate task status": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.evaluatorOutput.status",
                        "StringEquals": "success",
                        "Next": "Experiment status update to complete"
                      },
                      {
                        "Variable": "$.evaluatorOutput.status",
                        "StringEquals": "failed",
                        "Next": "Eval status failed and experiment complete"
                      }
                    ]
                  },
                  "Eval status failed and experiment complete": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET eval_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "failed"
                        },
                        ":expStatusRef": {
                          "S": "succeeded"
                        }
                      }
                    },
                    "End": true
                  },
                  "Experiment status update to complete": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.ExperimentTable",
                      "Key": {
                        "id": {
                          "S.$": "$.Item.id.S"
                        }
                      },
                      "UpdateExpression": "SET eval_status = :myValueRef, experiment_status = :expStatusRef",
                      "ExpressionAttributeValues": {
                        ":myValueRef": {
                          "S": "succeeded"
                        },
                        ":expStatusRef": {
                          "S": "succeeded"
                        }
                      }
                    },
                    "End": true
                  }
                },
                "ProcessorConfig": {
                  "Mode": "INLINE"
                }
              },
              "End": true,
              "InputPath": "$.Items"
            }
          }
        }
      ]
    },
    "Update Execution status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.ExecutionTable",
        "Key": {
          "id": {
            "S.$": "$.[0].execution_id.S"
          }
        },
        "UpdateExpression": "SET #val = :myValueRef",
        "ExpressionAttributeValues": {
          ":myValueRef": {
            "S": "completed"
          }
        },
        "ExpressionAttributeNames": {
          "#val": "status"
        }
      },
      "End": true
    }
  }
}