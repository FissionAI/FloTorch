name: AWS Resource Cleanup

on:
  workflow_dispatch:
    inputs:
      suffix:
        description: '6 character lowercase suffix for resource names'
        required: true
        type: string
      aws-region:
        description: 'AWS Region'
        required: true
        type: string
        default: 'us-east-1'

jobs:
  validate-and-approve:
    runs-on: self-hosted
    steps:
      - name: Validate suffix format
        run: |
          if [[ ! ${{ github.event.inputs.suffix }} =~ ^[a-z]{6}$ ]]; then
            echo "Error: Suffix must be exactly 6 lowercase characters"
            exit 1
          fi
    outputs:
      suffix: ${{ github.event.inputs.suffix }}
      region: ${{ github.event.inputs.aws-region }}

  cleanup:
    needs: validate-and-approve
    runs-on: self-hosted
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Run cleanup script
        run: |
          python - <<EOF
          import boto3
          import sys
          from datetime import datetime, timedelta

          def cleanup_resources(suffix, region):
              # S3 Bucket Cleanup
              s3_client = boto3.client('s3', region_name=region)
              bucket_name = f'flotorch-data-{suffix}'
              try:
                  paginator = s3_client.get_paginator('list_objects_v2')
                  for result in paginator.paginate(Bucket=bucket_name):
                      if 'Contents' in result:
                          objects = [{'Key': obj['Key']} for obj in result['Contents']]
                          s3_client.delete_objects(Bucket=bucket_name, Delete={'Objects': objects})
                  print(f"Emptied S3 bucket: {bucket_name}")
              except Exception as e:
                  print(f"Error with S3 bucket {bucket_name}: {e}")

              # ECR Repositories Cleanup
              ecr_client = boto3.client('ecr', region_name=region)
              ecr_repos = [
                  f'flotorch-indexing-{suffix}',
                  f'flotorch-retriever-{suffix}',
                  f'flotorch-evaluation-{suffix}',
                  f'flotorch-runtime-{suffix}',
                  f'flotorch-costcompute-{suffix}',
                  f'flotorch-app-{suffix}'
              ]

              for repo in ecr_repos:
                  try:
                      response = ecr_client.list_images(repositoryName=repo)
                      if response['imageIds']:
                          ecr_client.batch_delete_image(
                              repositoryName=repo,
                              imageIds=response['imageIds']
                          )
                      print(f"Cleaned ECR repository: {repo}")
                  except Exception as e:
                      print(f"Error with ECR repository {repo}: {e}")

              # CloudFormation Stack Deletion
              cfn_client = boto3.client('cloudformation', region_name=region)
              try:
                  stack_pages = cfn_client.get_paginator('list_stacks').paginate(
                      StackStatusFilter=['CREATE_COMPLETE', 'UPDATE_COMPLETE']
                  )
                  
                  for page in stack_pages:
                      for stack in page['StackSummaries']:
                          try:
                              stack_details = cfn_client.describe_stacks(StackName=stack['StackName'])
                              parameters = stack_details['Stacks'][0].get('Parameters', [])
                              
                              table_suffix_param = next(
                                  (p for p in parameters if p.get('ParameterKey') == 'TableSuffix' and p.get('ParameterValue') == suffix), 
                                  None
                              )
                              
                              is_root_stack = 'ParentId' not in stack
                              
                              if table_suffix_param and is_root_stack:
                                  cfn_client.delete_stack(StackName=stack['StackName'])
                                  print(f"Deleted root CloudFormation stack: {stack['StackName']}")
                          except Exception as e:
                              print(f"Error checking/deleting stack {stack['StackName']}: {e}")
              except Exception as e:
                  print(f"Error with CloudFormation stack deletion: {e}")

          if __name__ == '__main__':
              suffix = "${{ needs.validate-and-approve.outputs.suffix }}"
              region = "${{ needs.validate-and-approve.outputs.region }}"
              cleanup_resources(suffix, region)
          EOF
