Name: SageMaker_Cleanup
SchemaVersion: "1.0"

Triggers:
  - Type: SCHEDULE
    Expression: 0 * ? * * *

Actions:
  Cleanup:
    Identifier: aws/build@v1.0.0
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
        - Run: pip install boto3
        - Run: |
              python -c "
              import boto3
              from datetime import datetime, timedelta
              import os
              import time

              def cleanup_region(region):
                  cloudwatch = boto3.client('cloudwatch', region_name=region)
                  sagemaker = boto3.client('sagemaker', region_name=region)

                  try:
                      endpoints = sagemaker.list_endpoints()['Endpoints']
                      
                      for endpoint in endpoints:
                          try:
                              endpoint_details = sagemaker.describe_endpoint(EndpointName=endpoint['EndpointName'])
                              status = endpoint_details['EndpointStatus']
                              
                              # Skip if endpoint is not in a stable state
                              if status in ['Creating', 'Updating', 'SystemUpdating', 'RollingBack', 'Deleting']:
                                  print(f\"Skipping endpoint {endpoint['EndpointName']} as it's in {status} state\")
                                  continue
                              
                              if status != 'InService':
                                  print(f\"Skipping endpoint {endpoint['EndpointName']} as it's not in 'InService' state (current: {status})\")
                                  continue

                              end_time = datetime.utcnow()
                              start_time = end_time - timedelta(hours=1)

                              metrics_response = cloudwatch.get_metric_statistics(
                                  Namespace='AWS/SageMaker',
                                  MetricName='Invocations',
                                  Dimensions=[{'Name': 'EndpointName', 'Value': endpoint['EndpointName']}],
                                  StartTime=start_time,
                                  EndTime=end_time,
                                  Period=3600,
                                  Statistics=['Sum']
                              )

                              if (len(metrics_response['Datapoints']) == 0 or 
                                  all(datapoint['Sum'] == 0 for datapoint in metrics_response['Datapoints'])):
                                  
                                  # Check if the endpoint is being used by other services
                                  try:
                                      response = sagemaker.list_tags(
                                          ResourceArn=endpoint_details['EndpointArn']
                                      )
                                      if any('UsedBy' in tag['Key'] for tag in response['Tags']):
                                          print(f\"Skipping endpoint {endpoint['EndpointName']} as it's tagged as being used by another service\")
                                          continue
                                  except Exception as e:
                                      print(f\"Error checking tags for endpoint {endpoint['EndpointName']}: {str(e)}\")
                                      continue

                                  config_name = endpoint_details['EndpointConfigName']
                                  
                                  try:
                                      sagemaker.delete_endpoint(EndpointName=endpoint['EndpointName'])
                                      print(f\"Initiated deletion of endpoint: {endpoint['EndpointName']} in {region}\")
                                      
                                      # Wait for endpoint to be deleted before deleting config
                                      max_wait = 300  # 5 minutes timeout
                                      start_time = time.time()
                                      while time.time() - start_time < max_wait:
                                          try:
                                              status = sagemaker.describe_endpoint(EndpointName=endpoint['EndpointName'])['EndpointStatus']
                                              if status == 'Deleting':
                                                  time.sleep(10)
                                                  continue
                                          except sagemaker.exceptions.ClientError as e:
                                              if 'Could not find endpoint' in str(e):
                                                  break
                                              raise
                                      
                                      sagemaker.delete_endpoint_config(EndpointConfigName=config_name)
                                      print(f\"Deleted config: {config_name} in {region}\")
                                  except Exception as e:
                                      print(f\"Error deleting endpoint/config {endpoint['EndpointName']}: {str(e)}\")
                              else:
                                  print(f\"Skipping endpoint {endpoint['EndpointName']} as it has recent invocations\")
                                  
                          except Exception as e:
                              print(f\"Error processing endpoint {endpoint['EndpointName']}: {str(e)}\")
                              continue
                              
                  except Exception as e:
                      print(f\"Error in {region}: {str(e)}\")
                      raise

              for region in ['us-east-1', 'us-west-2']:
                  cleanup_region(region)
              "
      Container:
        Registry: CODECATALYST
        Image: CodeCatalystLinux_x86_64:2024_03
    Compute:
      Type: EC2
    Environment:
      Name: Dev